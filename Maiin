package maiin;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

/**
 *
 * @author marti
 */
public class Maiin {
 public static void leer(String dat) throws FileNotFoundException, IOException {
       
    }
    public static void main(String[] args) throws FileNotFoundException, IOException {
         String da;
         String dat="Exa.txt";
        FileReader l = new FileReader(dat);
        BufferedReader t = new BufferedReader(l);
        da = t.readLine();
        String [] numeros =(da.split(","));
      System.out.println("INgrese datos por comas y solo se pueden ingresar 10 numeros");
        int b[ ]= new int [numeros.length];
         for (int i = 0; i < numeros.length; i++) {
         b[i]=Integer.parseInt(numeros[i]);
        }
         
        t.close();
       boolean continuar = true, continuar2 = true;
		int opcion, numero = 1, elemento;
		
		Object inserta;
		
		Procesos obj = new Procesos();
		Scanner leer = new Scanner (System.in);
	
		while(continuar) {
			System.out.println("");
			System.out.println("Menu de listas enlazadas");
			System.out.println("1.- Insertar");
			System.out.println("2.- Mostrar Pre-orden");
			System.out.println("3.- Mostrar In-orden");
			System.out.println("4.- Mostrar Post-orden");
			System.out.println("5.- Buscar elemento");
			System.out.println("6.- Altura");
			System.out.println("7.- Cantidad de nodos");
			System.out.println("8.- Salir");
			opcion = leer.nextInt();
			
			switch (opcion) {
			case 1:
				System.out.println("Numeros insertados");
				
				while (continuar2) {
					Nodo nodoActual;
					int i=0;
					switch (numero) {
					case 1:
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 2:
                                            i=1;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;

					case 3:
                                            i=2;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 4:
                                            i=3;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 5:
                                            i=4;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 6:
                                            i=5;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 7:
                                            i=6;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 8:
                                            i=7;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 9:
                                            i=8;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					case 10:
                                            i=9;
						nodoActual = new Nodo(b[i]);
						obj.Insertar(nodoActual);
						break;
						
					default:
						break;
					}
					
					if(numero == 10)
						continuar2 = false;
					
					numero++;
				}
				break;
				
			case 2:
                            
				obj.preorden();
				break;
				
			case 3:
				obj.inorden();
				break;
				
			case 4:
				obj.posorden();
				break;
				
			case 5:
				System.out.println("¿Qué número desea buscar?");
				elemento = leer.nextInt();
				obj.Buscar(elemento);
				break;
				
			case 6:
				obj.retornaAltura();
				break;
			
			case 7:
				obj.cantidad();
				break;
			
			case 8:
				continuar = false;
				break;
				
			default:
				break;
			}
		}
    }
    
}
